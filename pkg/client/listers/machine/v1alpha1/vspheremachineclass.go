/*
Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/machine-controller-manager/pkg/apis/machine/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VsphereMachineClassLister helps list VsphereMachineClasses.
type VsphereMachineClassLister interface {
	// List lists all VsphereMachineClasses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VsphereMachineClass, err error)
	// VsphereMachineClasses returns an object that can list and get VsphereMachineClasses.
	VsphereMachineClasses(namespace string) VsphereMachineClassNamespaceLister
	VsphereMachineClassListerExpansion
}

// vsphereMachineClassLister implements the VsphereMachineClassLister interface.
type vsphereMachineClassLister struct {
	indexer cache.Indexer
}

// NewVsphereMachineClassLister returns a new VsphereMachineClassLister.
func NewVsphereMachineClassLister(indexer cache.Indexer) VsphereMachineClassLister {
	return &vsphereMachineClassLister{indexer: indexer}
}

// List lists all VsphereMachineClasses in the indexer.
func (s *vsphereMachineClassLister) List(selector labels.Selector) (ret []*v1alpha1.VsphereMachineClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VsphereMachineClass))
	})
	return ret, err
}

// VsphereMachineClasses returns an object that can list and get VsphereMachineClasses.
func (s *vsphereMachineClassLister) VsphereMachineClasses(namespace string) VsphereMachineClassNamespaceLister {
	return vsphereMachineClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VsphereMachineClassNamespaceLister helps list and get VsphereMachineClasses.
type VsphereMachineClassNamespaceLister interface {
	// List lists all VsphereMachineClasses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VsphereMachineClass, err error)
	// Get retrieves the VsphereMachineClass from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VsphereMachineClass, error)
	VsphereMachineClassNamespaceListerExpansion
}

// vsphereMachineClassNamespaceLister implements the VsphereMachineClassNamespaceLister
// interface.
type vsphereMachineClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VsphereMachineClasses in the indexer for a given namespace.
func (s vsphereMachineClassNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VsphereMachineClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VsphereMachineClass))
	})
	return ret, err
}

// Get retrieves the VsphereMachineClass from the indexer for a given namespace and name.
func (s vsphereMachineClassNamespaceLister) Get(name string) (*v1alpha1.VsphereMachineClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vspheremachineclass"), name)
	}
	return obj.(*v1alpha1.VsphereMachineClass), nil
}
